import{_ as n,c as i,a as e,d as s,b as r,e as o,f as d,r as l,o as c}from"./app-DEi7Rjij.js";const p={};function m(u,t){const a=l("RouteLink");return c(),i("div",null,[t[3]||(t[3]=e("h1",{id:"item-set-types",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#item-set-types"},[e("span",null,"Item Set Types")])],-1)),e("p",null,[t[1]||(t[1]=s("tem Set Types are used to easily spawn custom items for Clay Soldiers. They work in conjunction with the ")),r(a,{to:"/wiki/commands.html#csr-items"},{default:o(()=>t[0]||(t[0]=[e("code",null,"/csr items",-1)])),_:1}),t[2]||(t[2]=s(" command."))]),t[4]||(t[4]=d(`<h2 id="adding-items-to-existing-types" tabindex="-1"><a class="header-anchor" href="#adding-items-to-existing-types"><span>Adding Items to Existing Types</span></a></h2><p>To add items to a predefined type, simply include them in the corresponding item tag:</p><table><thead><tr><th>Key</th><th>Tag</th></tr></thead><tbody><tr><td>csr:basic</td><td>csr:clay_soldier_items/basic</td></tr><tr><td>csr:ranged</td><td>csr:clay_soldier_items/ranged</td></tr><tr><td>csr:tank</td><td>csr:clay_soldier_items/tank</td></tr><tr><td>csr:armored</td><td>csr:clay_soldier_items/armored</td></tr><tr><td>csr:specialist</td><td>csr:clay_soldier_items/specialist</td></tr><tr><td>csr:support</td><td>csr:clay_soldier_items/supportive</td></tr><tr><td>csr:diver</td><td>csr:clay_soldier_items/diver</td></tr><tr><td>csr:arsonist</td><td>csr:clay_soldier_items/arsonist</td></tr><tr><td>csr:magician</td><td>csr:clay_soldier_items/magician</td></tr><tr><td>csr:royalty</td><td>csr:clay_soldier_items/royalty</td></tr><tr><td>csr:fashion</td><td>csr:clay_soldier_items/fashion</td></tr><tr><td>csr:kingdom</td><td>csr:clay_soldier_items/kingdom</td></tr></tbody></table><h2 id="creating-a-custom-item-type" tabindex="-1"><a class="header-anchor" href="#creating-a-custom-item-type"><span>Creating a Custom Item Type</span></a></h2><p>To define your own item type, create a .json file inside the following directory structure of your data pack:</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">└─ data</span>
<span class="line">   └─ <span class="token punctuation">(</span>your data pack name<span class="token punctuation">)</span></span>
<span class="line">      └─ csr</span>
<span class="line">         └─ soldier_item_type</span>
<span class="line">            └─ <span class="token punctuation">(</span>your_type_name<span class="token punctuation">)</span>.json                 </span>
<span class="line"></span></code></pre></div><p>The file must contain a generator and a tag that it pulls items from.</p><p>JSON Structure</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;generator&quot;</span><span class="token operator">:</span> genrator<span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> tag</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>generator</strong> – Determines how items are selected from the tag.</li><li><strong>tag</strong> – The item tag used as the source pool.</li></ul><p>Generators selected the upt to give amount of items specified in the command from the tag. Available Generators are:</p><table><thead><tr><th>Generator</th><th>Description</th></tr></thead><tbody><tr><td><code>csr:default</code></td><td>Selects the specified number of items randomly from the tag. Items can be selected multiple times.</td></tr><tr><td><code>csr:one_of_each</code></td><td>Selects up to the specified number of unique items. No duplicates.</td></tr><tr><td><code>csr:one_of_each_no_tag</code></td><td>Like <code>one_of_each</code>, but excluded from the <code>csr:combined_defaulted</code> generator.</td></tr><tr><td><code>csr:combined_defaulted</code></td><td>Selects the given amounts of items from all item types.</td></tr></tbody></table><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;generator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;csr:default&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;csr:clay_soldier_items/armored&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14))])}const g=n(p,[["render",m],["__file","itemsettypes.html.vue"]]),y=JSON.parse('{"path":"/create-items/itemsettypes.html","title":"Item Set Types","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Adding Items to Existing Types","slug":"adding-items-to-existing-types","link":"#adding-items-to-existing-types","children":[]},{"level":2,"title":"Creating a Custom Item Type","slug":"creating-a-custom-item-type","link":"#creating-a-custom-item-type","children":[]},{"level":2,"title":"Example","slug":"example","link":"#example","children":[]}],"git":{"updatedTime":1747161857000,"contributors":[{"name":"XcraX1","email":"lego_master@web.de","commits":2}]},"filePathRelative":"create-items/itemsettypes.md"}');export{g as comp,y as data};
