import{_ as p,c as r,f as i,b as c,e as n,r as d,o as u,d as s,a as e}from"./app-CBFKTYkr.js";const m={};function h(g,a){const o=d("CodeTabs");return u(),r("div",null,[a[13]||(a[13]=i('<h1 id="common-values" tabindex="-1"><a class="header-anchor" href="#common-values"><span>Common Values</span></a></h1><p>This page provides an overview of commonly used values in Clay Soldiers Remake JSON files, including their formats, examples, and how to use them</p><h2 id="color" tabindex="-1"><a class="header-anchor" href="#color"><span>Color</span></a></h2><p>In Clay Soldiers Remake, color values in JSON files can be specified in two formats:</p><ul><li>Hex Code: A string in the format <code>#RRGGBB</code>.</li><li>Integer: A numeric representation of the hex code.</li></ul><div class="hint-container important"><p class="hint-container-title">Important</p><p>The <code>&quot;</code> are required for hex-color to work, this <code>&quot;color&quot;: &quot;#RRGGBB&quot;</code>, however this <code>&quot;color&quot;: #RRGGBB</code> would not work.</p></div><h3 id="example-setting-the-color-orange" tabindex="-1"><a class="header-anchor" href="#example-setting-the-color-orange"><span>Example: Setting the Color Orange</span></a></h3><p>For example, the color orange has the hex code <span style="color:#FFA500;"><code>#FFA500</code></span>. When converted to an integer, <span style="color:#FFA500;"><code>#FFA500</code></span> becomes <span style="color:#FFA500;"><code>16753920</code></span>. This can be represented in two ways:</p>',8)),c(o,{id:"35",data:[{id:"Hex Code"},{id:"Integer"}],"tab-id":"color-examples"},{title0:n(({value:t,isActive:l})=>a[0]||(a[0]=[s("Hex Code")])),title1:n(({value:t,isActive:l})=>a[1]||(a[1]=[s("Integer")])),tab0:n(({value:t,isActive:l})=>a[2]||(a[2]=[e("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token punctuation"},"{")]),s(`
`),e("span",{class:"line"},[s("  "),e("span",{class:"token property"},'"color"'),e("span",{class:"token operator"},":"),s(),e("span",{class:"token string"},'"#FFA500"')]),s(`
`),e("span",{class:"line"},[e("span",{class:"token punctuation"},"}")]),s(`
`),e("span",{class:"line"})])])],-1)])),tab1:n(({value:t,isActive:l})=>a[3]||(a[3]=[e("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token punctuation"},"{")]),s(`
`),e("span",{class:"line"},[s("  "),e("span",{class:"token property"},'"color"'),e("span",{class:"token operator"},":"),s(),e("span",{class:"token number"},"16753920")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token punctuation"},"}")]),s(`
`),e("span",{class:"line"})])])],-1)])),_:1}),a[14]||(a[14]=i(`<p>Both of these formats will produce the exact same color effect in game.</p><h3 id="special-color-jeb" tabindex="-1"><a class="header-anchor" href="#special-color-jeb"><span>Special Color: Jeb_</span></a></h3><p>There is also a unique color option called <code>&quot;jeb_&quot;</code>. When used, it creates a rgb effect.</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;color&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jeb_&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="chance" tabindex="-1"><a class="header-anchor" href="#chance"><span>Chance</span></a></h2><p>Chance values determine the likelihood of an action occurring. They are specified as:</p><ul><li>Number: A value between <code>0.0</code> (never happens) and <code>1.0</code> (always happens).</li><li>String: You can use predefined values like <code>&quot;never&quot;</code> (equivalent to <code>0.0</code>) or <code>&quot;always&quot;</code> (equivalent to <code>1.0</code>).</li></ul><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples"><span>Examples</span></a></h3>`,8)),c(o,{id:"74",data:[{id:"Number"},{id:"String"}],"tab-id":"chance-examples"},{title0:n(({value:t,isActive:l})=>a[4]||(a[4]=[s("Number")])),title1:n(({value:t,isActive:l})=>a[5]||(a[5]=[s("String")])),tab0:n(({value:t,isActive:l})=>a[6]||(a[6]=[e("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token punctuation"},"{")]),s(`
`),e("span",{class:"line"},[s("  "),e("span",{class:"token property"},'"cahnce"'),e("span",{class:"token operator"},":"),s(),e("span",{class:"token number"},"0.5"),s(),e("span",{class:"token comment"},"// -> 50% ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token punctuation"},"}")]),s(`
`),e("span",{class:"line"})])])],-1)])),tab1:n(({value:t,isActive:l})=>a[7]||(a[7]=[e("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token punctuation"},"{")]),s(`
`),e("span",{class:"line"},[s("  "),e("span",{class:"token property"},'"cahnce"'),e("span",{class:"token operator"},":"),s(),e("span",{class:"token string"},'"never"'),s(),e("span",{class:"token comment"},"// -> 0%")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token punctuation"},"}")]),s(`
`),e("span",{class:"line"})])])],-1)])),_:1}),a[15]||(a[15]=i('<h2 id="time" tabindex="-1"><a class="header-anchor" href="#time"><span>Time</span></a></h2><p>Time values in Clay Soldiers Remake can be expressed in two formats:</p><ul><li>Ticks: An integer, where 1 second equals 20 ticks.</li><li>Seconds: A string in the format <code>&quot;&lt;number&gt;s&quot;</code>.</li></ul><p>Both formats are interchangeable and yield the same results.</p><div class="hint-container info"><p class="hint-container-title">Conversion Note</p><p>1 second = 20 ticks.</p></div>',5)),c(o,{id:"108",data:[{id:"Ticks"},{id:"Seconds"}],"tab-id":"time-examples"},{title0:n(({value:t,isActive:l})=>a[8]||(a[8]=[s("Ticks")])),title1:n(({value:t,isActive:l})=>a[9]||(a[9]=[s("Seconds")])),tab0:n(({value:t,isActive:l})=>a[10]||(a[10]=[e("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token punctuation"},"{")]),s(`
`),e("span",{class:"line"},[s("  "),e("span",{class:"token property"},'"time"'),e("span",{class:"token operator"},":"),s(),e("span",{class:"token number"},"25"),s(),e("span",{class:"token comment"},"// -> 1,25 Seconds")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token punctuation"},"}")]),s(`
`),e("span",{class:"line"})])])],-1)])),tab1:n(({value:t,isActive:l})=>a[11]||(a[11]=[e("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token punctuation"},"{")]),s(`
`),e("span",{class:"line"},[s("  "),e("span",{class:"token property"},'"time"'),e("span",{class:"token operator"},":"),s(),e("span",{class:"token string"},'"3s"'),s(),e("span",{class:"token comment"},"// -> 3 Seconds")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token punctuation"},"}")]),s(`
`),e("span",{class:"line"})])])],-1)])),default:n(()=>[a[12]||(a[12]=e("a",{class:"header-anchor",href:"#examples-1"},[e("span",null,"Examples")],-1))]),_:1})])}const k=p(m,[["render",h],["__file","common-values.html.vue"]]),x=JSON.parse('{"path":"/create-items/common-values.html","title":"Common Values","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Color","slug":"color","link":"#color","children":[{"level":3,"title":"Example: Setting the Color Orange","slug":"example-setting-the-color-orange","link":"#example-setting-the-color-orange","children":[]},{"level":3,"title":"Special Color: Jeb_","slug":"special-color-jeb","link":"#special-color-jeb","children":[]}]},{"level":2,"title":"Chance","slug":"chance","link":"#chance","children":[{"level":3,"title":"Examples","slug":"examples","link":"#examples","children":[]}]},{"level":2,"title":"Time","slug":"time","link":"#time","children":[]}],"git":{"updatedTime":1746885425000,"contributors":[{"name":"XcraX1","email":"lego_master@web.de","commits":1}]},"filePathRelative":"create-items/common-values.md"}');export{k as comp,x as data};
