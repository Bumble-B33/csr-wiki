import{_ as d,c as u,f as l,a as s,d as n,b as p,e as t,r as c,o as k}from"./app-DEi7Rjij.js";const h={},y={class:"hint-container info"},g={class:"hint-container warning"};function m(f,a){const i=c("RouteLink"),r=c("CodeTabs");return k(),u("div",null,[a[75]||(a[75]=l(`<h1 id="item-properties" tabindex="-1"><a class="header-anchor" href="#item-properties"><span>Item Properties</span></a></h1><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties"><span>Properties</span></a></h2><p>Properties define specific attributes or behaviors that a soldier exhibits while carrying an item. They consist of a key-value pair where the key represents a <code>Soldier Property Type</code> and the <code>Value</code> specifies the associated attribute.</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;propertykey1&quot;</span><span class="token operator">:</span> value1<span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;propertykey2&quot;</span><span class="token operator">:</span> value2<span class="token punctuation">,</span></span>
<span class="line">  ...</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,4)),s("div",y,[a[3]||(a[3]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[a[1]||(a[1]=n("For a comprehensive list of all possible ")),p(i,{to:"/create-items/soldier-properties.html"},{default:t(()=>a[0]||(a[0]=[n("Properties")])),_:1}),a[2]||(a[2]=n(" and their descriptions, please refer to the properties documentation."))])]),a[76]||(a[76]=l(`<h2 id="slots" tabindex="-1"><a class="header-anchor" href="#slots"><span>Slots</span></a></h2><p>Slots determine where a soldier can hold or wear an item. There are currently 8 different slots available for soldiers, including their hands, armor slots, and backpacks.</p><table><thead><tr><th>Slot</th><th>Name</th></tr></thead><tbody><tr><td><code>Mainhand</code></td><td><code>&quot;mainhand&quot;</code></td></tr><tr><td><code>Offhand</code></td><td><code>&quot;offhand&quot;</code></td></tr><tr><td><code>Head</code></td><td><code>&quot;head&quot;</code></td></tr><tr><td><code>Chest</code></td><td><code>&quot;chest&quot;</code></td></tr><tr><td><code>Legs</code></td><td><code>&quot;legs&quot;</code></td></tr><tr><td><code>Feet</code></td><td><code>&quot;feet&quot;</code></td></tr><tr><td><code>Cape</code></td><td><code>&quot;cape&quot;</code></td></tr><tr><td><code>Backpack1</code></td><td><code>&quot;backpack&quot;</code></td></tr><tr><td><code>Backpack2</code></td><td><code>&quot;backpack_passive&quot;</code></td></tr></tbody></table><p>To set a soldier to hold an item in a specific slot, use the following syntax:</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;slot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mainhand&quot;</span></span>
<span class="line"></span></code></pre></div><p>Itâ€™s also possible to have the same item occupy multiple slots:</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;slots&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string">&quot;backpack&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;backpack_passive&quot;</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><p>If you want a soldier to hold an item in either hand, you can simplify it as:</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;slot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hands&quot;</span></span>
<span class="line"></span></code></pre></div><h2 id="pickup-priority" tabindex="-1"><a class="header-anchor" href="#pickup-priority"><span>Pickup Priority</span></a></h2><p>Pickup Priority determines the importance of an item when soldiers choose what to pick up. Higher values mean the soldier will prioritize that item over others, even dropping items with lower priorities to hold it.</p><p>Pickup priorities can range from <code>-10</code> to <code>10</code>. You can use numeric values or predefined ones:</p><table><thead><tr><th>Json</th><th style="text-align:right;">Value</th></tr></thead><tbody><tr><td><code>&quot;low&quot;</code></td><td style="text-align:right;">1</td></tr><tr><td><code>&quot;normal&quot;</code></td><td style="text-align:right;">3</td></tr><tr><td><code>&quot;high&quot;</code></td><td style="text-align:right;">5</td></tr><tr><td><code>&quot;very_high&quot;</code></td><td style="text-align:right;">10</td></tr></tbody></table>`,13)),p(r,{id:"174",data:[{id:"Predefined value:"},{id:"Custom value:"}],"tab-id":"pickup-example"},{title0:t(({value:e,isActive:o})=>a[4]||(a[4]=[n("Predefined value:")])),title1:t(({value:e,isActive:o})=>a[5]||(a[5]=[n("Custom value:")])),tab0:t(({value:e,isActive:o})=>a[6]||(a[6]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token property"},'"pick_priority"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"low"')]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:t(({value:e,isActive:o})=>a[7]||(a[7]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token property"},'"pick_priority"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token number"},"6")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[77]||(a[77]=l('<p>It is recommended to use the predefined values.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>This is an optional value, if it is not set it will be set to <code>normal</code>.</p></div><h2 id="drop-rate" tabindex="-1"><a class="header-anchor" href="#drop-rate"><span>Drop Rate</span></a></h2><p>The drop rate determines how likely a soldier is to drop an item when it dies. Drop rates range from <code>0.0</code> (never drops) to <code>1.0</code> (always drops). Predefined values are available:</p><table><thead><tr><th>Json</th><th style="text-align:right;">Value</th></tr></thead><tbody><tr><td><code>&quot;always&quot;</code></td><td style="text-align:right;">1.0</td></tr><tr><td><code>&quot;normal&quot;</code></td><td style="text-align:right;">0.5</td></tr><tr><td><code>&quot;never&quot;</code></td><td style="text-align:right;">0.0</td></tr></tbody></table>',5)),p(r,{id:"234",data:[{id:"Predefined value:"},{id:"Custom value:"}],"tab-id":"droprate-example"},{title0:t(({value:e,isActive:o})=>a[8]||(a[8]=[n("Predefined value:")])),title1:t(({value:e,isActive:o})=>a[9]||(a[9]=[n("Custom value:")])),tab0:t(({value:e,isActive:o})=>a[10]||(a[10]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token property"},'"drop_rate"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"always"')]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:t(({value:e,isActive:o})=>a[11]||(a[11]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token property"},'"drop_rate"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token number"},"0.7")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[78]||(a[78]=l(`<p>It is recommended to use the predefined values.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>This is an optional value, if it is not set it will be set to <code>normal</code>.</p></div><h2 id="pickup-functions" tabindex="-1"><a class="header-anchor" href="#pickup-functions"><span>Pickup Functions</span></a></h2><p>Pickup Functions define actions that are executed once when a soldier picks up an item. They are structured as a list of function objects:</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;on_pick&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> ...</span>
<span class="line">      ...</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">  ...</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3 id="dye-functions" tabindex="-1"><a class="header-anchor" href="#dye-functions"><span>Dye Functions</span></a></h3><p>Dye functions change the secondary color of the soldier when they pick up an item. The key is <code>csr:dye_soldier</code>. You can specify either a color value or a color getter function, and optionally whether to overwrite the current color.</p>`,7)),p(r,{id:"263",data:[{id:"Static Color"},{id:"Dynamic Color"}],"tab-id":"dye-example"},{title0:t(({value:e,isActive:o})=>a[12]||(a[12]=[n("Static Color")])),title1:t(({value:e,isActive:o})=>a[13]||(a[13]=[n("Dynamic Color")])),tab0:t(({value:e,isActive:o})=>a[14]||(a[14]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:dye_soldier"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"dye"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token property"},'"color"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token number"},"8339378"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token comment"},"// Integer value of the color (e.g., 7F3FB2 in hex)")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token property"},'"overwrite"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token boolean"},"true")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:t(({value:e,isActive:o})=>a[15]||(a[15]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:dye_soldier"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"dye"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token property"},'"color"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"from_item"'),n(),s("span",{class:"token comment"},"// Only works if the item itself is a dye")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[79]||(a[79]=l(`<h3 id="set-item" tabindex="-1"><a class="header-anchor" href="#set-item"><span>Set Item</span></a></h3><p>Set an <code>Item</code> in a <a href="#slots"><code>Slot</code></a>. The key is <code>csr:set_item</code>, an <code>Item</code> and a <code>Slot</code> are required. Additionally, an <code>Operation</code> can be specified, possible operations are:</p><p>This function sets an item in a specified <a href="#slots">slot</a> when picked up. The key is <code>csr:set_item</code>, and it requires an item and a slot. Additionally, you can specify an operation (<code>drop</code> or <code>replace</code>), with <code>drop</code> being the default.</p><ul><li><strong><code>drop</code>:</strong> drops the previous Item with its <a href="#drop-rate">drop rate</a></li><li><strong><code>replace</code>:</strong> replaces the previous Item</li></ul><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;csr:set_item&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;function&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;item&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;minecraft:coal_block&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;slot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;feet&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    operation<span class="token string">&quot;: &quot;</span>drop&quot;</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="effect-function" tabindex="-1"><a class="header-anchor" href="#effect-function"><span>Effect Function</span></a></h3><p>The effect function applies a status effect to the soldier. The key is <code>csr:apply_effect</code>, and it requires an effect type, duration, amplifier, and an operation. Available operations include:</p><table><thead><tr><th>Json</th><th>Description</th></tr></thead><tbody><tr><td><code>&quot;add&quot;</code></td><td>Adds the <code>Effect</code> to the Soldier</td></tr><tr><td><code>&quot;increase&quot;</code></td><td>Increase <code>Effect</code> by the <code>duration</code> and <code>amplifier</code></td></tr><tr><td><code>&quot;remove&quot;</code></td><td>Removes the <code>Effect</code> from the soldier.</td></tr></tbody></table>`,8)),p(r,{id:"337",data:[{id:"Adding Effect"},{id:"Removing Effect"}],"tab-id":"effect-example"},{title0:t(({value:e,isActive:o})=>a[16]||(a[16]=[n("Adding Effect")])),title1:t(({value:e,isActive:o})=>a[17]||(a[17]=[n("Removing Effect")])),tab0:t(({value:e,isActive:o})=>a[18]||(a[18]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:apply_effect"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token property"},'"effect"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"amplifier"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"duration"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token number"},"10000"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"effect"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"minecraft:slow_falling"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    operation"),s("span",{class:"token string"},'": "'),n('add"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:t(({value:e,isActive:o})=>a[19]||(a[19]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:apply_effect"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token property"},'"effect"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"effect"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"minecraft:poison"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"operation"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"remove"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[80]||(a[80]=l('<h3 id="conversion-function" tabindex="-1"><a class="header-anchor" href="#conversion-function"><span>Conversion Function</span></a></h3><p>Converts the soldier into another type. The key is <code>csr:conversion</code>, and it requires a <code>Type</code> and optional additional data.</p><table><thead><tr><th>Json</th><th>Description</th></tr></thead><tbody><tr><td><code>&quot;csr:clay_soldier&quot;</code></td><td>Converts the Soldier to a Normal <a href="../wiki/clay-soldiers">Clay Soldier</a></td></tr><tr><td><code>&quot;csr:zombie_clay_soldier&quot;</code></td><td>Converts the Soldier to a <a href="../wiki/clay-soldiers#zombie-soldier">Zombie Clay Soldier</a></td></tr><tr><td><code>&quot;csr:vampire_clay_soldier&quot;</code></td><td>Converts the Soldier to a <a href="../wiki/clay-soldiers#vampire-soldier">Vampire Clay Soldier</a></td></tr><tr><td><code>&quot;csr:clay_wraith&quot;</code></td><td>Converts the Soldier to a <a href="../wiki/clay-soldiers#wraith">Wraith</a></td></tr></tbody></table><p>The <code>Additional Data</code>depends on the <code>Type</code>.</p>',4)),s("table",null,[a[29]||(a[29]=s("thead",null,[s("tr",null,[s("th",null,"For"),s("th",null,"Tag"),s("th",null,"Description")])],-1)),s("tbody",null,[a[24]||(a[24]=s("tr",null,[s("td",null,[s("code",null,'"csr:clay_soldier"')]),s("td",null,[s("span",{class:"table-text-center"},"-")]),s("td",null,[s("span",{class:"table-text-center"},"-")])],-1)),a[25]||(a[25]=s("tr",null,[s("td",null,[s("code",null,'"csr:zombie_clay_soldier"')]),s("td",null,[s("code",null,'"Curable"'),n(" either "),s("code",null,"0"),n(" or "),s("code",null,"1")]),s("td",null,[s("code",null,"1"),n(" means Zombie can be cured, "),s("code",null,"0"),n(" it can't")])],-1)),a[26]||(a[26]=s("tr",null,[s("td",null,[s("code",null,'"csr:zombie_clay_soldier"')]),s("td",null,[s("code",null,'"PickUpItems"'),n(" either "),s("code",null,"0"),n(" or "),s("code",null,"1")]),s("td",null,[s("code",null,"1"),n(" means Zombie can pick up items, "),s("code",null,"0"),n(" it can't")])],-1)),a[27]||(a[27]=s("tr",null,[s("td",null,[s("code",null,'"csr:vampire_clay_soldier"')]),s("td",null,[s("code",null,'"Alpha"'),n(" either "),s("code",null,"0"),n(" or "),s("code",null,"1")]),s("td",null,[s("code",null,"1"),n(" means Vampire is an Alpha, "),s("code",null,"0"),n(" it is not")])],-1)),a[28]||(a[28]=s("tr",null,[s("td",null,[s("code",null,'"csr:clay_wraith"')]),s("td",null,[s("code",null,'"LifeTicks"'),n(" any Number > 0.")]),s("td",null,"For how many ticks the Wraith will be alive")],-1)),s("tr",null,[a[22]||(a[22]=s("td",null,[s("code",null,'"csr:clay_wraith"')],-1)),a[23]||(a[23]=s("td",null,[s("code",null,'"WraithAttacks"')],-1)),s("td",null,[p(i,{to:"/create-items/soldier-properties.html#special-attacks-and-counter-attacks"},{default:t(()=>a[20]||(a[20]=[n("Special Attacks")])),_:1}),a[21]||(a[21]=n(" this Wraith can performe"))])])])]),a[81]||(a[81]=s("hr",null,null,-1)),p(r,{id:"484",data:[{id:"Zombie"},{id:"Vampire"}],"tab-id":"conversion-example"},{title0:t(({value:e,isActive:o})=>a[30]||(a[30]=[n("Zombie")])),title1:t(({value:e,isActive:o})=>a[31]||(a[31]=[n("Vampire")])),tab0:t(({value:e,isActive:o})=>a[32]||(a[32]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:conversion"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"function"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:zombie_clay_soldier"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:t(({value:e,isActive:o})=>a[33]||(a[33]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:conversion"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"function"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:vampire_clay_soldier"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token property"},'"additional_data"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token property"},'"Alpha"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token number"},"1")]),n(`
`),s("span",{class:"line"},[n("      "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[82]||(a[82]=l(`<h3 id="select-random" tabindex="-1"><a class="header-anchor" href="#select-random"><span>Select Random</span></a></h3><p>Randomly selects on function out of the available ones.</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;csr:select_random&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;effect&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;selection&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">     <span class="token punctuation">{</span></span>
<span class="line">       <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;csr:apply_effect&quot;</span><span class="token punctuation">,</span></span>
<span class="line">         <span class="token property">&quot;effect&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token property">&quot;amplifier&quot;</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span></span>
<span class="line">           <span class="token property">&quot;duration&quot;</span><span class="token operator">:</span> <span class="token string">&quot;17s&quot;</span><span class="token punctuation">,</span></span>
<span class="line">           <span class="token property">&quot;effect&quot;</span><span class="token operator">:</span> <span class="token string">&quot;minecraft:wither&quot;</span><span class="token punctuation">,</span></span>
<span class="line">           <span class="token property">&quot;operation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;add&quot;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">       ...   </span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="predicate" tabindex="-1"><a class="header-anchor" href="#predicate"><span>Predicate</span></a></h2><p>A predicate tests whether certain properties of the item should be applied to the soldier carrying it. Predicates consist of a <code>Type</code> and associated values. They are structured as follows:</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;predicate&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> ...</span>
<span class="line">  ...</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="hint-container info"><p class="hint-container-title">Info</p><p><code>Predicates</code> do not test whether the Soldier can pick up the Item.</p></div><p>If no predicate is specified, it defaults to <code>Always True</code>.</p><p><strong>The possible <code>Types</code> are as follows:</strong></p><h3 id="always-true" tabindex="-1"><a class="header-anchor" href="#always-true"><span>Always True</span></a></h3><p>This predicate always returns <code>true</code>. Itâ€™s used as a default when no other conditions are specified.</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;predicate&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;csr:always_true&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="has-custom-color" tabindex="-1"><a class="header-anchor" href="#has-custom-color"><span>Has Custom Color</span></a></h3><p>Returns <code>true</code> if the soldier has a custom color. No additional properties are required. The key is <code>csr:has_custom_color</code>.</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;predicate&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;csr:has_custom_color&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="item-predicate" tabindex="-1"><a class="header-anchor" href="#item-predicate"><span>Item Predicate</span></a></h3><p>Tests whether the soldier is holding a specific item in a given <a href="#slots">slot</a>. There are two special slots</p><ul><li><code>&quot;any&quot;</code> which tests all slots if they contain the item</li><li><code>&quot;suitalbe&quot;</code> which test if the soldier could hold the item in any slot</li></ul>`,18)),p(r,{id:"549",data:[{id:"Normal Slot"},{id:"Special Slot"}],"tab-id":"item-predicate"},{title0:t(({value:e,isActive:o})=>a[34]||(a[34]=[n("Normal Slot")])),title1:t(({value:e,isActive:o})=>a[35]||(a[35]=[n("Special Slot")])),tab0:t(({value:e,isActive:o})=>a[36]||(a[36]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token property"},'"predicate"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:has_item"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token property"},'"test"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"item"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"minecraft:stick"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("     "),s("span",{class:"token property"},'"slot"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"mainhand"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:t(({value:e,isActive:o})=>a[37]||(a[37]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token property"},'"predicate"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:has_item"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token property"},'"test"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"item"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"minecraft:paper"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token property"},'"slot"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"suitable"')]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[83]||(a[83]=l('<h3 id="logic-predicate" tabindex="-1"><a class="header-anchor" href="#logic-predicate"><span>Logic Predicate</span></a></h3><p>Tests a list of other predicates using logical operations <code>any</code>, <code>all</code>, <code>none</code>, or <code>not</code>. The key is <code>csr:logic</code>, and an <code>Operation</code> and a list of <code>Predicates</code>is required.</p><table><thead><tr><th>Json</th><th style="text-align:center;">Operation</th></tr></thead><tbody><tr><td><code>&quot;any&quot;</code></td><td style="text-align:center;">or</td></tr><tr><td><code>&quot;all&quot;</code></td><td style="text-align:center;">and</td></tr><tr><td><code>&quot;none&quot;</code></td><td style="text-align:center;">and not</td></tr><tr><td><code>&quot;not&quot;</code></td><td style="text-align:center;">not</td></tr></tbody></table>',3)),p(r,{id:"609",data:[{id:"Any"},{id:"Not"}],"tab-id":"logic-predicate-example"},{title0:t(({value:e,isActive:o})=>a[38]||(a[38]=[n("Any")])),title1:t(({value:e,isActive:o})=>a[39]||(a[39]=[n("Not")])),tab0:t(({value:e,isActive:o})=>a[40]||(a[40]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token property"},'"predicate"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n(),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:logic"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n(),s("span",{class:"token property"},'"test"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("   "),s("span",{class:"token property"},'"operation"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"any"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("   "),s("span",{class:"token property"},'"predicates"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"[")]),n(`
`),s("span",{class:"line"},[n("     "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("       "),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:has_item"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("       "),s("span",{class:"token property"},'"test"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("         "),s("span",{class:"token property"},'"item"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"minecraft:stick"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("         "),s("span",{class:"token property"},'"slot"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"mainhand"')]),n(`
`),s("span",{class:"line"},[n("       "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("     "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("     "),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},"     ..."),n(`
`),s("span",{class:"line"},[n("     "),s("span",{class:"token punctuation"},"}"),n("  ")]),n(`
`),s("span",{class:"line"},[n("   "),s("span",{class:"token punctuation"},"]")]),n(`
`),s("span",{class:"line"},[n(),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:t(({value:e,isActive:o})=>a[41]||(a[41]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token property"},'"predicate"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n(),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:logic"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n(),s("span",{class:"token property"},'"test"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("   "),s("span",{class:"token property"},'"operation"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"not"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("   "),s("span",{class:"token property"},'"predicate"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("     "),s("span",{class:"token property"},'"type"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"csr:has_effect"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("     "),s("span",{class:"token property"},'"test"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("       "),s("span",{class:"token property"},'"effect"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"minecraft:conduit_power"')]),n(`
`),s("span",{class:"line"},[n("     "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("   "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n(),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[84]||(a[84]=l(`<h3 id="effect-predicate" tabindex="-1"><a class="header-anchor" href="#effect-predicate"><span>Effect Predicate</span></a></h3><p>Tests whether the soldier has a specific effect. The key is <code>csr:has_effect</code>, an effect is required. Optional properties include minimum duration and amplifier.</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;predicate&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;csr:has_effect&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;effect&quot;</span><span class="token operator">:</span> <span class="token string">&quot;minecraft:conduit_power&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,3)),s("div",g,[a[46]||(a[46]=s("p",{class:"hint-container-title"},"Warning",-1)),s("p",null,[a[43]||(a[43]=n("The ")),a[44]||(a[44]=s("code",null,"Effect Preciate",-1)),a[45]||(a[45]=n(" is only tested when a soldier picks up the item or the Inventory changes. This should only be used on permanent effects. It is generally recommend to use this only for ")),p(i,{to:"/create-items/pois.html"},{default:t(()=>a[42]||(a[42]=[n("Item POIs")])),_:1})])]),a[85]||(a[85]=l(`<h3 id="soldier-property-predicate" tabindex="-1"><a class="header-anchor" href="#soldier-property-predicate"><span>Soldier Property Predicate</span></a></h3><p>Tests whether a certain Property matches a certain condition. The key is <code>csr:holdable_property</code>, a <code>Property</code> and <code>Test</code>are required.<br> The possible <code>Tests</code> are:</p><table><thead><tr><th>Json</th><th>Description</th></tr></thead><tbody><tr><td><code>&quot;increase&quot;</code></td><td>Test if the <code>Property</code> was increased</td></tr><tr><td><code>&quot;decrease&quot;</code></td><td>Test if the <code>Property</code> was decreased</td></tr><tr><td><code>&quot;exist&quot;</code></td><td>Test if the <code>Property</code> was increased or decreased</td></tr></tbody></table><p>Example for checking if a property is increased:</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;predicate&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;csr:holdable_property&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;property&quot;</span><span class="token operator">:</span> <span class="token string">&quot;set_on_fire&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;increase&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p><strong>Advanced Test</strong></p><p>There are also 2 Advanced test that can be done. These require an additional <code>value</code>, an Integer.</p><table><thead><tr><th>Json</th><th>Description</th></tr></thead><tbody><tr><td><code>&quot;count&quot;</code></td><td>Test if the <code>Property</code> is at least a given Value</td></tr><tr><td><code>&quot;exactly&quot;</code></td><td>Test if the <code>Property</code> is exactly a give Value</td></tr></tbody></table>`,8)),s("p",null,[p(i,{to:"/create-items/soldier-property-int.html"},{default:t(()=>a[47]||(a[47]=[n("Click here")])),_:1}),a[48]||(a[48]=n(" to see how ")),a[49]||(a[49]=s("code",null,"Properties",-1)),a[50]||(a[50]=n(" convert to integers."))]),a[86]||(a[86]=l(`<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;predicate&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;csr:holdable_property&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;property&quot;</span><span class="token operator">:</span> <span class="token string">&quot;attack_type&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;exactly&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">6</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,1)),s("p",null,[a[52]||(a[52]=n("This test whether the Soldier does have an ")),p(i,{to:"/create-items/soldier-properties.html#attack-type"},{default:t(()=>a[51]||(a[51]=[s("code",null,"Attack Type",-1)])),_:1}),a[53]||(a[53]=n(" of ")),a[54]||(a[54]=s("code",null,"Zombier",-1)),a[55]||(a[55]=n("."))]),a[87]||(a[87]=l(`<h2 id="removal-condition" tabindex="-1"><a class="header-anchor" href="#removal-condition"><span>Removal Condition</span></a></h2><p>The <strong>removal condition</strong> determines if and when an item held by a soldier should be used up or destroyed. It is defined as a key-value pair where:</p><ul><li>The <code>key</code> represents the Remove Type, which specifies the context or action triggering the item&#39;s removal.</li><li>The <code>value</code> specifies additional conditions, such as a chance or specific criteria for removal.</li></ul><p>If no removal condition is defined, the item will not be removed by default.</p><p><strong>Structure</strong></p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;removal_condition&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;key1&quot;</span><span class="token operator">:</span> condition1<span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;key2&quot;</span><span class="token operator">:</span> condition2<span class="token punctuation">,</span></span>
<span class="line">  ...</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="on-use" tabindex="-1"><a class="header-anchor" href="#on-use"><span>On Use</span></a></h3><p>The <strong>On Use</strong> condition applies when the item is actively used by a soldier. This includes actions such as, Melee Attacks, Apply Helpful Effects, Ranged Attacks</p><p>The key for melee actions is <code>melee_use</code> and for ranged actions is <code>ranged_use</code>. The condition requires a <code>chance</code> value, which is a number between <code>0.0</code> (never removed) and <code>1.0</code> (always removed).</p>`,9)),p(r,{id:"754",data:[{id:"Melee"},{id:"Ranged"}],"tab-id":"on-use-examples"},{title0:t(({value:e,isActive:o})=>a[56]||(a[56]=[n("Melee")])),title1:t(({value:e,isActive:o})=>a[57]||(a[57]=[n("Ranged")])),tab0:t(({value:e,isActive:o})=>a[58]||(a[58]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token property"},'"removal_condition"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token property"},'"melee_use"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token number"},"0.5")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:t(({value:e,isActive:o})=>a[59]||(a[59]=[s("div",{class:"language-json","data-highlighter":"prismjs","data-ext":"json","data-title":"json"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token property"},'"removal_condition"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token property"},'"ranged_use"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"always"')]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),a[88]||(a[88]=l(`<h3 id="on-hurt" tabindex="-1"><a class="header-anchor" href="#on-hurt"><span>On Hurt</span></a></h3><p>The On Hurt condition triggers when the soldier holding/wearing the item is damaged. The key is <code>on_hurt</code>.</p><p>Additional options include:</p><ul><li><strong>Chance:</strong> Specifies the likelihood of the item being removed, with a value between <code>[0.0 - 1.0]</code>.</li><li><strong>Condition:</strong> A predicate using the <a href="https://minecraft.wiki/w/Predicate#condition_damage_source_properties" target="_blank" rel="noopener noreferrer">Damage Source Properties Predicate</a>, the same as the one used in Minecraft advancements.</li></ul><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;removal_condition&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;on_hurt&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;condition&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">&quot;expected&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;minecraft:is_explosion&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;chance&quot;</span><span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="on-teleport" tabindex="-1"><a class="header-anchor" href="#on-teleport"><span>On Teleport</span></a></h3><p>The On Teleport condition triggers when the soldier teleports. The key is <code>on_teleport</code>.</p><p>Additional options include:</p><ul><li><strong>Chance:</strong> Specifies the likelihood of the item being removed, with a value between <code>[0.0 - 1.0]</code>.</li><li><strong>Type:</strong> type of teleportation, possible types are:</li></ul>`,9)),s("table",null,[a[69]||(a[69]=s("thead",null,[s("tr",null,[s("th",null,"Type"),s("th",null,"Description")])],-1)),s("tbody",null,[s("tr",null,[a[62]||(a[62]=s("td",null,[s("code",null,'"to_target"')],-1)),s("td",null,[a[61]||(a[61]=n("Called when ")),p(i,{to:"/create-items/soldier-properties.html#teleportation"},{default:t(()=>a[60]||(a[60]=[n("teleporting to its target")])),_:1})])]),s("tr",null,[a[65]||(a[65]=s("td",null,[s("code",null,'"to_safty"')],-1)),s("td",null,[a[64]||(a[64]=n("Called when ")),p(i,{to:"/create-items/soldier-properties.html#teleportation"},{default:t(()=>a[63]||(a[63]=[n("teleporting to safety")])),_:1})])]),s("tr",null,[a[68]||(a[68]=s("td",null,[s("code",null,'"to_owner"')],-1)),s("td",null,[a[67]||(a[67]=n("Called when ")),p(i,{to:"/create-items/soldier-properties.html#teleport-to-owner"},{default:t(()=>a[66]||(a[66]=[n("teleporting to owner")])),_:1})])])])]),a[89]||(a[89]=l(`<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;removal_condition&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;on_teleport&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;chance&quot;</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;teleportation_type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;to_target&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="on-escape" tabindex="-1"><a class="header-anchor" href="#on-escape"><span>On Escape</span></a></h3>`,2)),s("p",null,[a[71]||(a[71]=n("The On Escape condition triggers when the soldier does a ")),p(i,{to:"/create-items/soldier-properties.html#evacuation-property"},{default:t(()=>a[70]||(a[70]=[n("spectacular escape")])),_:1}),a[72]||(a[72]=n(". The key is ")),a[73]||(a[73]=s("code",null,"on_escape",-1)),a[74]||(a[74]=n("."))]),a[90]||(a[90]=l(`<p>Additional options include:</p><ul><li><strong>Chance:</strong> Specifies the likelihood of the item being removed, with a value between <code>[0.0 - 1.0]</code>.</li></ul><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;removal_condition&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;on_escape&quot;</span><span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,3))])}const q=d(h,[["render",m],["__file","holdable-values.html.vue"]]),b=JSON.parse('{"path":"/create-items/holdable-values.html","title":"Item Properties","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Properties","slug":"properties","link":"#properties","children":[]},{"level":2,"title":"Slots","slug":"slots","link":"#slots","children":[]},{"level":2,"title":"Pickup Priority","slug":"pickup-priority","link":"#pickup-priority","children":[]},{"level":2,"title":"Drop Rate","slug":"drop-rate","link":"#drop-rate","children":[]},{"level":2,"title":"Pickup Functions","slug":"pickup-functions","link":"#pickup-functions","children":[{"level":3,"title":"Dye Functions","slug":"dye-functions","link":"#dye-functions","children":[]},{"level":3,"title":"Set Item","slug":"set-item","link":"#set-item","children":[]},{"level":3,"title":"Effect Function","slug":"effect-function","link":"#effect-function","children":[]},{"level":3,"title":"Conversion Function","slug":"conversion-function","link":"#conversion-function","children":[]},{"level":3,"title":"Select Random","slug":"select-random","link":"#select-random","children":[]}]},{"level":2,"title":"Predicate","slug":"predicate","link":"#predicate","children":[{"level":3,"title":"Always True","slug":"always-true","link":"#always-true","children":[]},{"level":3,"title":"Has Custom Color","slug":"has-custom-color","link":"#has-custom-color","children":[]},{"level":3,"title":"Item Predicate","slug":"item-predicate","link":"#item-predicate","children":[]},{"level":3,"title":"Logic Predicate","slug":"logic-predicate","link":"#logic-predicate","children":[]},{"level":3,"title":"Effect Predicate","slug":"effect-predicate","link":"#effect-predicate","children":[]},{"level":3,"title":"Soldier Property Predicate","slug":"soldier-property-predicate","link":"#soldier-property-predicate","children":[]}]},{"level":2,"title":"Removal Condition","slug":"removal-condition","link":"#removal-condition","children":[{"level":3,"title":"On Use","slug":"on-use","link":"#on-use","children":[]},{"level":3,"title":"On Hurt","slug":"on-hurt","link":"#on-hurt","children":[]},{"level":3,"title":"On Teleport","slug":"on-teleport","link":"#on-teleport","children":[]},{"level":3,"title":"On Escape","slug":"on-escape","link":"#on-escape","children":[]}]}],"git":{"updatedTime":1747161857000,"contributors":[{"name":"XcraX1","email":"lego_master@web.de","commits":2}]},"filePathRelative":"create-items/holdable-values.md"}');export{q as comp,b as data};
